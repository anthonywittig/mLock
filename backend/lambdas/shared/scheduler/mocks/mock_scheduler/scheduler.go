// Code generated by MockGen. DO NOT EDIT.
// Source: scheduler.go

// Package mock_scheduler is a generated GoMock package.
package mock_scheduler

import (
	context "context"
	shared "mlock/lambdas/shared"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockDeviceRepository is a mock of DeviceRepository interface.
type MockDeviceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceRepositoryMockRecorder
}

// MockDeviceRepositoryMockRecorder is the mock recorder for MockDeviceRepository.
type MockDeviceRepositoryMockRecorder struct {
	mock *MockDeviceRepository
}

// NewMockDeviceRepository creates a new mock instance.
func NewMockDeviceRepository(ctrl *gomock.Controller) *MockDeviceRepository {
	mock := &MockDeviceRepository{ctrl: ctrl}
	mock.recorder = &MockDeviceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceRepository) EXPECT() *MockDeviceRepositoryMockRecorder {
	return m.recorder
}

// AppendToAuditLog mocks base method.
func (m *MockDeviceRepository) AppendToAuditLog(ctx context.Context, device shared.Device, managedLockCodes []*shared.DeviceManagedLockCode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendToAuditLog", ctx, device, managedLockCodes)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendToAuditLog indicates an expected call of AppendToAuditLog.
func (mr *MockDeviceRepositoryMockRecorder) AppendToAuditLog(ctx, device, managedLockCodes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendToAuditLog", reflect.TypeOf((*MockDeviceRepository)(nil).AppendToAuditLog), ctx, device, managedLockCodes)
}

// List mocks base method.
func (m *MockDeviceRepository) List(ctx context.Context) ([]shared.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]shared.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockDeviceRepositoryMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockDeviceRepository)(nil).List), ctx)
}

// Put mocks base method.
func (m *MockDeviceRepository) Put(ctx context.Context, item shared.Device) (shared.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, item)
	ret0, _ := ret[0].(shared.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockDeviceRepositoryMockRecorder) Put(ctx, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockDeviceRepository)(nil).Put), ctx, item)
}

// MockReservationRepository is a mock of ReservationRepository interface.
type MockReservationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockReservationRepositoryMockRecorder
}

// MockReservationRepositoryMockRecorder is the mock recorder for MockReservationRepository.
type MockReservationRepositoryMockRecorder struct {
	mock *MockReservationRepository
}

// NewMockReservationRepository creates a new mock instance.
func NewMockReservationRepository(ctrl *gomock.Controller) *MockReservationRepository {
	mock := &MockReservationRepository{ctrl: ctrl}
	mock.recorder = &MockReservationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReservationRepository) EXPECT() *MockReservationRepositoryMockRecorder {
	return m.recorder
}

// GetForUnits mocks base method.
func (m *MockReservationRepository) GetForUnits(ctx context.Context, units []shared.Unit) (map[uuid.UUID][]shared.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForUnits", ctx, units)
	ret0, _ := ret[0].(map[uuid.UUID][]shared.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForUnits indicates an expected call of GetForUnits.
func (mr *MockReservationRepositoryMockRecorder) GetForUnits(ctx, units interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForUnits", reflect.TypeOf((*MockReservationRepository)(nil).GetForUnits), ctx, units)
}

// MockUnitRepository is a mock of UnitRepository interface.
type MockUnitRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUnitRepositoryMockRecorder
}

// MockUnitRepositoryMockRecorder is the mock recorder for MockUnitRepository.
type MockUnitRepositoryMockRecorder struct {
	mock *MockUnitRepository
}

// NewMockUnitRepository creates a new mock instance.
func NewMockUnitRepository(ctrl *gomock.Controller) *MockUnitRepository {
	mock := &MockUnitRepository{ctrl: ctrl}
	mock.recorder = &MockUnitRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnitRepository) EXPECT() *MockUnitRepositoryMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockUnitRepository) List(ctx context.Context) ([]shared.Unit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]shared.Unit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockUnitRepositoryMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUnitRepository)(nil).List), ctx)
}
